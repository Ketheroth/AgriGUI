buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = mcversion + '-' + modversion
group = 'com.ketheroth.agrigui'
archivesBaseName = 'AgriGUI'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: mappingchannel, version: mappingversion

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			// Make mixins work on dependencies
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			mods {
				agrigui {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			// Make mixins work on dependencies
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			mods {
				agrigui {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			args '--mod', 'agrigui', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

dependencies {
	minecraft 'net.minecraftforge:forge:' + mcversion + '-' + forgeversion

	// Agricraft 3.0.5
	compileOnly fg.deobf("curse.maven:agricraft-225635:3441653")
//	runtimeOnly fg.deobf("curse.maven:agricraft-225635:3441653")
	// InfinityLib 2.0.6
	compileOnly fg.deobf("curse.maven:infinitylib-251396:3441572")
//	runtimeOnly fg.deobf("curse.maven:infinitylib-251396:3441572")

	//Serene Seasons
//	compileOnly fg.deobf("curse.maven:serene_seasons-291874:3202233")
//	runtimeOnly fg.deobf("curse.maven:serene_seasons-291874:3202233")

	//Mystical Agriculture
//	compileOnly fg.deobf("curse.maven:mystical_agriculture_api-246640:3359340")
//	runtimeOnly fg.deobf("curse.maven:mystical_agriculture-246640:3398788")
//	runtimeOnly fg.deobf("curse.maven:cucumber-272335:3349690")   //Mystical Agriculture runtime dependency
	// Real examples
	// compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	// compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title"     : "AgriGUI",
				"Specification-Vendor"    : "Ketheroth",
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : "Ketheroth",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
